===== talmud_wikipedia_explorer\asgi.py =====
"""
ASGI config for talmud_wikipedia_explorer project.
It exposes the ASGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/
"""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'talmud_wikipedia_explorer.settings')
application = get_asgi_application()

===== talmud_wikipedia_explorer\settings.py =====
"""
Django settings for talmud_wikipedia_explorer project.
Generated by 'django-admin startproject' using Django 4.1.7.
For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'django-insecure-ifsby3c0uf6-67_l+=me8na6+j1f&9!3(b89b+s@5^(2jbt@(l'
DEBUG = True
ALLOWED_HOSTS = []
INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'explorer', 'allauth', 'allauth.account', 'allauth.socialaccount', 'allauth.socialaccount.providers.google', 'social_django'
]
MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'talmud_wikipedia_explorer.urls'
TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, },
]
WSGI_APPLICATION = 'talmud_wikipedia_explorer.wsgi.application'
DATABASES = { 'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3', }
}
AUTH_PASSWORD_VALIDATORS = [ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTHENTICATION_BACKENDS = ( 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend',
)
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' AUTHENTICATION_BACKENDS = [ 'django.contrib.auth.backends.ModelBackend', 'allauth.account.auth_backends.AuthenticationBackend', 'social_core.backends.google.GoogleOAuth2',
]
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = "338771698505-97sfrh6456u763mbk5e80sir1cdfojco.apps.googleusercontent.com"
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "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"
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [ 'https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile',
]
SOCIAL_AUTH_URL_NAMESPACE = 'social'
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

===== talmud_wikipedia_explorer\urls.py =====
from django.urls import include, path
from django.contrib import admin
urlpatterns = [ path('admin/', admin.site.urls), path('', include('explorer.urls')), path('accounts/', include('allauth.urls')), path('oauth/', include('social_django.urls', namespace='social')),
]

===== talmud_wikipedia_explorer\wsgi.py =====
"""
WSGI config for talmud_wikipedia_explorer project.
It exposes the WSGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
"""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'talmud_wikipedia_explorer.settings')
application = get_wsgi_application()
===== explorer\apps.py =====
from django.apps import AppConfig
class ExplorerConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'explorer'
===== explorer\forms.py =====
from django import forms
class CommentForm(forms.Form): comment_text = forms.CharField(widget=forms.Textarea, label='Comment')
===== explorer\models.py =====
from django.db import models
from django.contrib.auth.models import User
class UserProfile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE)
class TalmudText(models.Model): title = models.CharField(max_length=255) content = models.TextField()
class WikipediaArticle(models.Model): title = models.CharField(max_length=255) content = models.TextField()
class Favorite(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) talmud_text = models.ForeignKey(TalmudText, on_delete=models.CASCADE, null=True) wikipedia_article = models.ForeignKey(WikipediaArticle, on_delete=models.CASCADE, null=True)
class Highlight(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) talmud_text = models.ForeignKey(TalmudText, on_delete=models.CASCADE, null=True) wikipedia_article = models.ForeignKey(WikipediaArticle, on_delete=models.CASCADE, null=True) highlighted_text = models.TextField()
class Comment(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) talmud_text = models.ForeignKey(TalmudText, on_delete=models.CASCADE, null=True) wikipedia_article = models.ForeignKey(WikipediaArticle, on_delete=models.CASCADE, null=True) content = models.TextField()
===== explorer\urls.py =====
from django.urls import path
from . import views
urlpatterns = [ path('', views.home, name='home'), path('logout/', views.user_logout, name='logout'), path('favorite/<int:talmud_text_id>/', views.add_favorite, name='add_talmud_favorite'), path('favorite/wiki/<int:wikipedia_article_id>/', views.add_favorite, name='add_wikipedia_favorite'), path('highlight/<int:talmud_text_id>/', views.add_highlight, name='add_talmud_highlight'), path('highlight/wiki/<int:wikipedia_article_id>/', views.add_highlight, name='add_wikipedia_highlight'), path('comment/<int:talmud_text_id>/', views.add_comment, name='add_talmud_comment'), path('comment/wiki/<int:wikipedia_article_id>/', views.add_comment, name='add_wikipedia_comment'), path('comment/talmud/<int:talmud_text_id>/', views.add_comment, name='add_talmud_comment'), path('comment/wiki/<int:wikipedia_article_id>/', views.add_comment, name='add_wikipedia_comment'), path('logout/', views.user_logout, name='user_logout'),
]
===== explorer\views.py =====
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import UserProfile, TalmudText, WikipediaArticle, Favorite, Highlight, Comment
def home(request): talmudic_texts = TalmudText.objects.all() wikipedia_articles = WikipediaArticle.objects.all() context = {'talmudic_texts': talmudic_texts, 'wikipedia_articles': wikipedia_articles} return render(request, 'explorer/home.html', context)
def user_logout(request): logout(request) return redirect('home')
@login_required
def add_favorite(request, talmud_text_id=None, wikipedia_article_id=None): if talmud_text_id: talmud_text = TalmudText.objects.get(id=talmud_text_id) favorite, created = Favorite.objects.get_or_create(user=request.user, talmud_text=talmud_text) elif wikipedia_article_id: wikipedia_article = WikipediaArticle.objects.get(id=wikipedia_article_id) favorite, created = Favorite.objects.get_or_create(user=request.user, wikipedia_article=wikipedia_article) return redirect('home')
@login_required
def add_highlight(request, talmud_text_id=None, wikipedia_article_id=None): if request.method == 'POST': selected_text = request.POST['selected_text'] if talmud_text_id: talmud_text = TalmudText.objects.get(id=talmud_text_id) highlight = Highlight(user=request.user, talmud_text=talmud_text, text=selected_text) elif wikipedia_article_id: wikipedia_article = WikipediaArticle.objects.get(id=wikipedia_article_id) highlight = Highlight(user=request.user, wikipedia_article=wikipedia_article, text=selected_text) highlight.save() return redirect('home')
from .forms import CommentForm
@login_required
def add_comment(request, talmud_text_id=None, wikipedia_article_id=None): form = CommentForm(request.POST or None) if request.method == 'POST' and form.is_valid(): comment_text = form.cleaned_data['comment_text'] if talmud_text_id: talmud_text = TalmudText.objects.get(id=talmud_text_id) comment = Comment(user=request.user, talmud_text=talmud_text, content=comment_text) elif wikipedia_article_id: wikipedia_article = WikipediaArticle.objects.get(id=wikipedia_article_id) comment = Comment(user=request.user, wikipedia_article=wikipedia_article, content=comment_text) comment.save() return redirect('home') context = {'form': form}
===== explorer\templates\explorer\add_comment.html =====
{% extends 'explorer/base.html' %}
{% block content %} <h2>Add Comment</h2> <form method="post" action=""> {% csrf_token %} {{ form.as_p }} <button type="submit" class="btn btn-primary">Submit</button> </form>
{% endblock %}
===== explorer\templates\explorer\base.html =====
<!DOCTYPE html>
<html lang="en">
<head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta http-equiv="X-UA-Compatible" content="ie=edge"> <title>{% block title %}Explorer{% endblock %}</title> {% load static %} <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}"> <link rel="stylesheet" href="{% static 'css/main.css' %}">
</head>
<body> <!-- Navigation --> <nav class="navbar navbar-expand-lg navbar-dark bg-dark"> <div class="container"> <a class="navbar-brand" href="{% url 'home' %}">Explorer</a> <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=" <span class="navbar-toggler-icon"></span> </button> <div class="collapse navbar-collapse" id="navbarResponsive"> <ul class="navbar-nav ml-auto"> {% if user.is_authenticated %} <li class="nav-item"> <a class="nav-link" href="{% url 'logout' %}">Logout</a> </li> {% else %} <li class="nav-item"> <a class="nav-link" href="{% url 'social:begin' 'google-oauth2' %}?next={{ request.path }}">Login</a> </li> {% endif %} </ul> </div> </div> </nav> <!-- Page Content --> <div class="container mt-4"> {% block content %} {% endblock %} </div> <!-- Footer --> <footer class="py-3 bg-dark"> <div class="container"> <p class="m-0 text-center text-white">Explorer &copy; 2023</p> </div> <!-- /.container --> </footer> <!-- Scripts --> <script src="{% static 'js/jquery.min.js' %}"></script> <script src="{% static 'js/bootstrap.min.js' %}"></script>
</body>
</html>
===== explorer\templates\explorer\home.html =====
{% extends 'explorer/base.html' %}
{% block content %} <main> <div class="row"> <div class="col-md-6"> <section class="talmud-section"> <h1>Talmudic Texts</h1> <hr> <ul class="list-group"> {% for talmudic_text in talmudic_texts %} <li class="list-group-item"> <h5>{{ talmudic_text.title }}</h5> <p>{{ talmudic_text.text }}</p> <a href="{% url 'add_talmud_favorite' talmudic_text.id %}" class="btn btn-outline-secondary btn-sm">Add to favorites</a> <a href="{% url 'add_talmud_highlight' talmudic_text.id %}" class="btn btn-outline-secondary btn-sm">Highlight</a> <a href="{% url 'add_talmud_comment' talmudic_text.id %}" class="btn btn-outline-secondary btn-sm">Comment</a> </li> {% empty %} <li class="list-group-item"> No Talmudic texts available. </li> {% endfor %} </ul> </section> </div> <div class="col-md-6"> <section class="wikipedia-section"> <h1>Wikipedia Articles</h1> <hr> <ul class="list-group"> {% for wikipedia_article in wikipedia_articles %} <li class="list-group-item"> <h5>{{ wikipedia_article.title }}</h5> <p>{{ wikipedia_article.content }}</p> <a href="{% url 'add_wikipedia_favorite' wikipedia_article.id %}" class="btn btn-outline-secondary btn-sm">Add to favorites</a> <a href="{% url 'add_wikipedia_highlight' wikipedia_article.id %}" class="btn btn-outline-secondary btn-sm">Highlight</a> <a href="{% url 'add_wikipedia_comment' wikipedia_article.id %}" class="btn btn-outline-secondary btn-sm">Comment</a> </li> {% empty %} <li class="list-group-item"> No Wikipedia articles available. </li> {% endfor %} </ul> </section> </div> </div> </main>
{% endblock %}
===== explorer\templates\explorer\login.html =====
{% extends 'explorer/base.html' %}
{% block title %}Login{% endblock %}
{% block content %} <h2>Login</h2> {% if messages %} <ul class="messages"> {% for message in messages %} <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li> {% endfor %} </ul> {% endif %} <form method="post" action="{% url 'user_login' %}"> {% csrf_token %} <label for="username">Username:</label> <input type="text" name="username" id="username"><br> <label for="password">Password:</label> <input type="password" name="password" id="password"><br> <input type="submit" value="Login"> </form>
{% endblock %}